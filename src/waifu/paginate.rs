use crate::Context;
use ::serenity::all::UserId;
use anime_grubber::waifu_pics::Categories;
use poise::{serenity_prelude as serenity, CreateReply};
use serenity::all::{CreateEmbed, CreateMessage, ReactionType};
use std::collections::HashMap;
use std::sync::{LazyLock, Mutex};
use std::time::{SystemTime, UNIX_EPOCH};
use tracing::instrument;

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
static LAST_REFRESH: LazyLock<Mutex<HashMap<UserId, u64>>> =
    LazyLock::new(|| Mutex::new(HashMap::new()));

/// –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö —Å –Ω–∞—á–∞–ª–∞ —ç–ø–æ—Ö–∏ UNIX
fn get_current_time() -> u64 {
    SystemTime::now()
        .duration_since(UNIX_EPOCH)
        .unwrap()
        .as_secs()
}

/// –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
fn update_refresh_time(user_id: UserId, time: u64) {
    let mut map = LAST_REFRESH.lock().unwrap();
    map.insert(user_id, time);
}

/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ–ª–∂–Ω–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±—ã—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∞
/// (true –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω–µ–µ 3 —Å–µ–∫—É–Ω–¥ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
fn is_refresh_disabled(user_id: UserId, current_time: u64) -> bool {
    let map = LAST_REFRESH.lock().unwrap();
    let last_refresh = map.get(&user_id).copied().unwrap_or(0);
    current_time - last_refresh < 3
}

/// –°–æ–∑–¥–∞–µ—Ç –Ω–∞–±–æ—Ä –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
fn create_buttons(
    ctx_id: u64,
    current_page: &usize,
    embeds_len: usize,
    is_disabled: bool,
) -> Vec<serenity::CreateButton> {
    let mut buttons = vec![];

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º, –µ—Å–ª–∏ –∏—Ö –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π
    if embeds_len != 1 {
        for num in 0..embeds_len {
            let button = if current_page == &num {
                // –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã–¥–µ–ª—è–µ—Ç—Å—è –∑–µ–ª–µ–Ω—ã–º
                serenity::CreateButton::new(format!("{}-{}", ctx_id, num))
                    .label(format!("{}", num + 1))
                    .style(serenity::ButtonStyle::Success)
            } else {
                // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–µ—Ä—ã–µ
                serenity::CreateButton::new(format!("{}-{}", ctx_id, num))
                    .label(format!("{}", num + 1))
                    .style(serenity::ButtonStyle::Secondary)
            };
            buttons.push(button);
        }
    }

    // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –æ–±—â–∏–π —á–∞—Ç
    buttons.push(
        serenity::CreateButton::new(format!("{}-send_to_chat", ctx_id))
            .emoji(ReactionType::Unicode("üöÄ".to_string()))
            .style(serenity::ButtonStyle::Primary),
    );

    // –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    buttons.push(
        serenity::CreateButton::new(format!("{}-refresh", ctx_id))
            .emoji(ReactionType::Unicode("üîÑ".to_string()))
            .style(serenity::ButtonStyle::Secondary)
            .disabled(!is_disabled),
    );

    buttons
}

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –æ–±—â–∏–π —á–∞—Ç
async fn handle_send_to_chat(ctx: &Context<'_>, embed: &CreateEmbed) -> Result<(), crate::Error> {
    let message = CreateMessage::new()
        .embed(embed.clone())
        .allowed_mentions(serenity::CreateAllowedMentions::new());

    ctx.channel_id().send_message(&ctx.http(), message).await?;
    Ok(())
}

async fn handle_refresh(
    ctx: &Context<'_>,
    press: &serenity::ComponentInteraction,
    items: &mut Vec<CreateEmbed>,
    categorie: &Categories,
    current_page: &mut usize,
) -> Result<(), crate::Error> {
    let now = get_current_time();
    update_refresh_time(ctx.author().id, now);

    let new_embeds = super::post::generate(true, categorie, ctx).await?;
    items.clear();
    items.extend(new_embeds.into_iter());
    *current_page = 0;

    let buttons = create_buttons(ctx.id(), current_page, items.len(), false);

    press
        .create_response(
            ctx.serenity_context(),
            serenity::CreateInteractionResponse::UpdateMessage(
                serenity::CreateInteractionResponseMessage::new()
                    .embed(items[*current_page].clone())
                    .components(vec![serenity::CreateActionRow::Buttons(buttons)])
                    .ephemeral(true),
            ),
        )
        .await?;

    Ok(())
}
/// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏, —Å–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
#[instrument(skip(ctx))]
pub async fn paginate(
    ctx: Context<'_>,
    embeds: &[CreateEmbed],
    categorie: Categories,
    run_now: bool,
) -> Result<(), crate::Error> {
    let ctx_id = ctx.id();
    let user_id = ctx.author().id;
    let now = get_current_time();
    let mut embeds = embeds.to_vec();
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    update_refresh_time(user_id, now);
    let is_disabled = is_refresh_disabled(user_id, now);
    let mut current_page = 0;

    // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if run_now {
        let reply = CreateReply::default()
            .ephemeral(true)
            .embed(embeds[current_page].clone());
        ctx.send(reply).await?;
    } else {
        let buttons = create_buttons(ctx_id, &current_page, embeds.len(), is_disabled);
        let reply = CreateReply::default()
            .ephemeral(true)
            .embed(embeds[current_page].clone())
            .components(vec![serenity::CreateActionRow::Buttons(buttons)]);
        ctx.send(reply).await?;
    }

    // –ù–∞—á–∏–Ω–∞–µ–º —Å–ª—É—à–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
    while let Some(press) = serenity::collector::ComponentInteractionCollector::new(ctx)
        .filter(move |press| press.data.custom_id.starts_with(&ctx_id.to_string()))
        .timeout(std::time::Duration::from_secs(60 * 60))
        .await
    {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
        if press.data.custom_id == format!("{}-send_to_chat", ctx_id) {
            handle_send_to_chat(&ctx, &embeds[current_page]).await?;
        } else if press.data.custom_id == format!("{}-refresh", ctx_id) {
            handle_refresh(&ctx, &press, &mut embeds, &categorie, &mut current_page).await?;
            continue;
        } else {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
            current_page = press
                .data
                .custom_id
                .split('-')
                .nth(1)
                .and_then(|s| s.parse().ok())
                .unwrap_or(0);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü
        if !press.data.custom_id.contains("refresh") {
            let buttons = create_buttons(ctx_id, &current_page, embeds.len(), is_disabled);
            press
                .create_response(
                    ctx.serenity_context(),
                    serenity::CreateInteractionResponse::UpdateMessage(
                        serenity::CreateInteractionResponseMessage::new()
                            .embed(embeds[current_page].clone())
                            .components(vec![serenity::CreateActionRow::Buttons(buttons)]),
                    ),
                )
                .await?;
        }
    }

    Ok(())
}
