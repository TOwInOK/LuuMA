name: Build and Push Docker Image

permissions:
  contents: read
  packages: write

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "production"
        type: choice
        options:
          - production
          - staging
          - development
      debug_enabled:
        description: "Run the deployment with debug logging"
        required: false
        type: boolean
        default: false

jobs:
  rust-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          targets: x86_64-unknown-linux-musl, aarch64-unknown-linux-musl
          components: rustfmt, clippy
          cache: true

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Build
        run: cargo build

      - name: Run Clippy
        run: cargo clippy -- -D warnings

  docker-build:
    needs: rust-checks
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform:
          - os: linux/amd64
            arch: amd64
            target: x86_64-unknown-linux-musl
          - os: linux/arm64
            arch: arm64
            target: aarch64-unknown-linux-musl
    env:
      REGISTRY: ghcr.io

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Downcase REPO
        run: |
          echo "IMAGE_NAME=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=raw,value=latest-${{ matrix.platform.arch }}
            type=sha,format=short,suffix=-${{ matrix.platform.arch }}
          flavor: |
            latest=false
          labels: |
            org.opencontainers.image.title=shuller-bot
            org.opencontainers.image.description=Anime picture fetcher bot
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.version=${{ github.sha }}
            maintainer=towinok

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: ${{ matrix.platform.os }}
          target: final-${{ matrix.platform.arch }}
          build-args: |
            TARGETARCH=${{ matrix.platform.arch }}
            RUST_TARGET=${{ matrix.platform.target }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache-${{ matrix.platform.arch }}
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache-${{ matrix.platform.arch }},mode=max

      - name: Verify push
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-${{ matrix.platform.arch }}
          docker image inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-${{ matrix.platform.arch }}

  create-manifest:
    needs: docker-build
    runs-on: ubuntu-latest
    env:
      REGISTRY: ghcr.io
    steps:
      - name: Downcase REPO
        run: |
          echo "IMAGE_NAME=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push manifest
        run: |
          # Проверяем наличие образов
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-amd64
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-arm64

          MANIFEST_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"

          echo "Creating manifest for $MANIFEST_TAG"

          # Создаем и пушим манифест
          docker manifest create $MANIFEST_TAG \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-amd64 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-arm64

          docker manifest annotate $MANIFEST_TAG \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-amd64 \
            --os linux --arch amd64

          docker manifest annotate $MANIFEST_TAG \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-arm64 \
            --os linux --arch arm64

          echo "Pushing manifest"
          docker manifest push $MANIFEST_TAG

          echo "Verifying manifest"
          docker manifest inspect $MANIFEST_TAG
