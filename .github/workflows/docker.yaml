name: Build and Push Docker Image

permissions:
  contents: read
  packages: write

on:
  push:
    branches:
      - main

jobs:
  rust-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          target: x86_64-unknown-linux-musl
          components: rustfmt, clippy
          cache: true

      - name: Build
        run: cargo build

      - name: Run Clippy
        run: cargo clippy -- -D warnings

  docker-build:
    needs: rust-checks
    runs-on: ubuntu-latest
    env:
      REGISTRY: ghcr.io

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Downcase REPO
        run: |
          echo "IMAGE_NAME=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=raw,value=latest
            type=sha,format=short
          flavor: |
            latest=true
          labels: |
            org.opencontainers.image.title=shuller-bot
            org.opencontainers.image.description=Anime picture fetcher bot
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.version=${{ github.sha }}
            maintainer=towinok

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64
          build-args: |
            TARGETARCH=amd64
            RUST_TARGET=x86_64-unknown-linux-musl

      - name: Verify push
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker image inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
